<Decls> -> <Decl> <Decls> | EPSILON
<Decl> -> <Func_Decl> | <Var_Decl>
<Func_Decl> -> func <Id> ( <Func_ParamsOpt>
<Func_ParamsOpt> -> <Params> ) returns <Type> <Block> | ) returns <Type> <Block>
<Params> -> <Param> <ParamsOpt>
<ParamsOpt> -> , <Params> | EPSILON
<Param> -> <Id> as <Type>
<Var_Decl> -> <Var> ;
<Var> -> <Id> as <Type> <VarOpt>
<VarOpt> -> = <Op_Or> |  EPSILON
<Type> -> char | str | int | float | void | bool
<Stm> -> <Var_Decl> | <Var_Asssign> ; | if ( <Expr> ) <Then_Stm> <If_Opt> | while ( <Expr> ) <Then_Stm> | <Normal_Stm>
<Then_Stm> -> if ( <Expr> ) <Then_Stm> <If_Opt> | while ( <Expr> ) <Then_Stm> | <Normal_Stm>
<If_Opt> -> else <Then_Stm> | EPSILON
<Normal_Stm> -> <Block> | <Expr> ; | break ; | continue ; | return <Expr> ; | printk ( <Op_Or> ) ; | ;
<Block> -> { <Stm_List> }
<Stm_List> ->  <Stm> <Stm_List> | EPSILON
<Var_Asssign> -> <Id> = <Expr>
<Expr> -> <Op_Or>
<Op_Or> -> <Op_And> <Op_Or_Opt>
<Op_Or_Opt> -> // <Op_Or> | EPSILON
<Op_And> -> <Op_BinOr> <Op_And_Opt>
<Op_And_Opt> -> && <Expr> | EPSILON
<Op_BinOr> -> <Op_BinAND> <Op_BinOr_Opt>
<Op_BinOr_Opt> -> / <Expr> | EPSILON
<Op_BinAND> -> <Op_Equate> <Op_BinAND_Opt>
<Op_BinAND_Opt> -> & <Expr> | EPSILON
<Op_Equate> -> <Op_Compare> <Op_Equate_Opt>
<Op_Equate_Opt> -> == <Expr> | != <Expr> | EPSILON
<Op_Compare> -> <Op_Add> <Op_Compare_Opt>
<Op_Compare_Opt> -> < <Expr> | > <Expr> | <= <Expr> | >= <Expr> | EPSILON
<Op_Add> -> <Op_Mult> <Op_Add_Opt>
<Op_Add_Opt> -> + <Expr> | - <Expr> | EPSILON
<Op_Mult> -> <Op_Unary> <Op_Mult_Opt>
<Op_Mult_Opt> -> * <Expr> | : <Expr> | % <Expr> | EPSILON
<Op_Unary> -> !  <Expr> | ~  <Expr> | -  <Expr> | <Value>
<Value> -> <OctLiteral> | <HexLiteral> | <DecLiteral> | <StringLiteral> | <CharLiteral> | <FloatLiteral> | <BoolLiteral> | <Id> <Id_Opt> | ( <Expr> )
<Id_Opt> -> ( <Id_Opt2> | EPSILON
<Id_Opt2> -> <Expr_List> ) | )
<Expr_List> -> <Expr> <Expr_List_Opt>
<Expr_List_Opt> -> , <Expr_List> | EPSILON
