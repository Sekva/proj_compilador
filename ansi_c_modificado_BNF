"Case Sensitive" : True
"Start Symbol"   : <Decls>

{Hex Digit}      : {Digit} + [abcdefABCDEF]
{Oct Digit}      : [01234567]

{Id Head}        : {Letter} + [_]
{Id Tail}        : {Id Head} + {Digit}

{String Ch}      : {Printable} - ["]
{Char Ch}        : {Printable} - ['']

DecLiteral       : [123456789]{digit}*
OctLiteral       : 0{Oct Digit}*
HexLiteral       : 0x{Hex Digit}+
FloatLiteral     : {Digit}*'.'{Digit}+

StringLiteral    : '"'( {String Ch} | '\'{Printable} )* '"'
CharLiteral      : '' ( {Char Ch} | '\'{Printable} )''

Id               : {Id Head}{Id Tail}*


<BoolLiteral> ::= 'true'
		| 'false'


! ===================================================================
! Declarations
! ===================================================================


<Decls> ::= <Decl> <Decls>
          |


<Decl>  ::= <Func Decl>
          | <Var Decl>    


! ===================================================================
! Function  Declaration
! ===================================================================

<Func Decl>      ::= <Func Id> '(' <Func ParamsOpt>


<Func ParamsOpt> ::= <Params> ')' <Block>
                   | ')' <Block>


<Params>         ::= <Param> <ParamsOpt>


<ParamsOpt>      ::= ',' <Params>
	           |

               
<Param>          ::= <Type> <Id>

               
<Types>          ::= <Type> <TypesOpt>


<TypesOpt>       ::= ',' <Types>
	           |
	       

<Func Id>        ::= <Type> <Id>

! ===================================================================
! Variable Declaration
! ===================================================================

<Var Decl> ::= <Type> <Var> <Var List>  ';'
             | <Var> <Var List>  ';'
             
<Var>      ::= <Id> <Array> <VarOpt>

<VarOpt>   ::= '=' <Op If>
	     | 

<Array>    ::= '[' <ArrayOpt>
             |

<ArrayOpt> ::= <Expr> ']'
 	     | ']'
             
<Var List> ::=  ',' <Var> <Var List>
             | 

! ===================================================================
! Types
! ===================================================================

<Type>   ::= char
           | str
           | int
           | float
           | void           
           | bool           

! ===================================================================
! Statements
! ===================================================================

<Stm>        ::= <Var Decl>
               | <Id> ':'                            !Label
               | 'if' '(' <Expr> ')' <IfOpt>          
               | 'while' '(' <Expr> ')' <Stm> 
               | <Normal Stm>


<IfOpt>      ::= <Then Stm> 'else' <Stm>
	       | <Stm>


<Then Stm>   ::= 'if' '(' <Expr> ')' <Then Stm> 'else' <Then Stm> 
               | 'while' '(' <Expr> ')' <Then Stm>
               | <Normal Stm>

<Normal Stm> ::= <Block>
               | <Expr> ';'               
               | 'break' ';'
               | 'continue' ';'
               | 'return' <Expr> ';'
               | 'printk' '(' <Op If> ')' ';' !Op If no lugar de expr pra n ter atribuição no print
               | ';'              !Null statement

<Block>      ::= '{' <Stm List> '}' 

<Stm List>   ::=  <Stm> <Stm List> 
               | 


! ===================================================================
! Here begins the C's 15 levels of operator precedence.
! ===================================================================

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


<Expr>       ::= <Op Assign>
	       | <Op Assing> <ExprRec>

<ExprRec>    ::= ',' <Op Assing>
	       | ',' <Op Assing> <ExprRec>


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

<Op Assign>  ::= <Op If> '='   <Op Assign>
               | <Op If> '+='  <Op Assign>
               | <Op If> '-='  <Op Assign>
               | <Op If> '*='  <Op Assign>
               | <Op If> '/='  <Op Assign>
               | <Op If> '^='  <Op Assign>
               | <Op If> '&='  <Op Assign>
               | <Op If> '|='  <Op Assign>
               | <Op If> '>>=' <Op Assign>
               | <Op If> '<<=' <Op Assign>
               | <Op If>


<Op If>      ::= <Op Or> '?' <Op If> ':' <Op If>
               | <Op Or>


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

<Op Or>      ::= <Op And>
	       | <Op And> <OpOrRec>

<OpOrRec>    ::= <Op Or> '||' <Op And>
	       | <Op Or> '||' <Op And> <OpOrRec>


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

<Op And>     ::= <Op BinOr>
	       | <Op BinOr> <OpAndRec>

<OpAndRec>   ::= <Op And> '&&' <Op BinOr>
	       | <Op And> '&&' <Op BinOr> <OpAndRec>

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

<Op BinOR>   ::= <Op BinOr> '|' <Op BinXOR>
               | <Op BinXOR>


<Op BinXOR>  ::= <Op BinXOR> '^' <Op BinAND>
               | <Op BinAND>


<Op BinAND>  ::= <Op BinAND> '&' <Op Equate>
               | <Op Equate>


<Op Equate>  ::= <Op Equate> '==' <Op Compare>
               | <Op Equate> '!=' <Op Compare>
               | <Op Compare>


<Op Compare> ::= <Op Compare> '<'  <Op Shift>
               | <Op Compare> '>'  <Op Shift>
               | <Op Compare> '<=' <Op Shift>
               | <Op Compare> '>=' <Op Shift>
               | <Op Add>


<Op Add>     ::= <Op Add> '+' <Op Mult>
               | <Op Add> '-' <Op Mult>
               | <Op Mult>


<Op Mult>    ::= <Op Mult> '*' <Op Unary>
               | <Op Mult> '/' <Op Unary>
               | <Op Mult> '%' <Op Unary>
               | <Op Unary>


<Op Unary>   ::= '!'    <Op Unary>
               | '~'    <Op Unary>   
               | '-'    <Op Unary>
               | '*'    <Op Unary>
               | '&'    <Op Unary>               
               | '++'   <Op Unary>
               | '--'   <Op Unary>
               | '(' <Type> ')' <Op Unary>   !CAST
               | <Value>


<Value>      ::= <OctLiteral>
               | <HexLiteral>
               | <DecLiteral>  
               | <StringLiteral>
               | <CharLiteral>
               | <FloatLiteral>
	       | <BoolLiteral>
               | <Id> '(' <Expr> ')'
               | <Id> '(' ')'          
               | <Id>
               | '(' <Expr> ')'
